import { Prisma as BasePrisma, BasePrismaOptions } from "prisma-binding";
import { GraphQLResolveInfo } from "graphql";

export const typeDefs = `
# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Post implements Node {
  id: ID!
  isPublished: Boolean!
  title: String!
  text: String!
}

type Talk implements Node {
  id: ID!
  createdAt: DateTime!
  text: String!
}


#
# Other Types
#

type AggregatePost {
  count: Int!
}

type AggregateTalk {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

scalar Long

type Mutation {
  createPost(data: PostCreateInput!): Post!
  createTalk(data: TalkCreateInput!): Talk!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateTalk(data: TalkUpdateInput!, where: TalkWhereUniqueInput!): Talk
  deletePost(where: PostWhereUniqueInput!): Post
  deleteTalk(where: TalkWhereUniqueInput!): Talk
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertTalk(where: TalkWhereUniqueInput!, create: TalkCreateInput!, update: TalkUpdateInput!): Talk!
  updateManyPosts(data: PostUpdateInput!, where: PostWhereInput!): BatchPayload!
  updateManyTalks(data: TalkUpdateInput!, where: TalkWhereInput!): BatchPayload!
  deleteManyPosts(where: PostWhereInput!): BatchPayload!
  deleteManyTalks(where: TalkWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  isPublished: Boolean
  title: String!
  text: String!
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  isPublished_ASC
  isPublished_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PostPreviousValues {
  id: ID!
  isPublished: Boolean!
  title: String!
  text: String!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  isPublished: Boolean
  title: String
  text: String
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  isPublished: Boolean
  isPublished_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  talks(where: TalkWhereInput, orderBy: TalkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Talk]!
  post(where: PostWhereUniqueInput!): Post
  talk(where: TalkWhereUniqueInput!): Talk
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  talksConnection(where: TalkWhereInput, orderBy: TalkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TalkConnection!
  node(id: ID!): Node
}

type Subscription {
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  talk(where: TalkSubscriptionWhereInput): TalkSubscriptionPayload
}

type TalkConnection {
  pageInfo: PageInfo!
  edges: [TalkEdge]!
  aggregate: AggregateTalk!
}

input TalkCreateInput {
  text: String!
}

type TalkEdge {
  node: Talk!
  cursor: String!
}

enum TalkOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TalkPreviousValues {
  id: ID!
  createdAt: DateTime!
  text: String!
}

type TalkSubscriptionPayload {
  mutation: MutationType!
  node: Talk
  updatedFields: [String!]
  previousValues: TalkPreviousValues
}

input TalkSubscriptionWhereInput {
  AND: [TalkSubscriptionWhereInput!]
  OR: [TalkSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TalkWhereInput
}

input TalkUpdateInput {
  text: String
}

input TalkWhereInput {
  AND: [TalkWhereInput!]
  OR: [TalkWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
}

input TalkWhereUniqueInput {
  id: ID
}
`;

export type TalkOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "text_ASC"
  | "text_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "isPublished_ASC"
  | "isPublished_DESC"
  | "title_ASC"
  | "title_DESC"
  | "text_ASC"
  | "text_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface TalkWhereInput {
  AND?: TalkWhereInput[] | TalkWhereInput;
  OR?: TalkWhereInput[] | TalkWhereInput;
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  createdAt?: DateTime;
  createdAt_not?: DateTime;
  createdAt_in?: DateTime[] | DateTime;
  createdAt_not_in?: DateTime[] | DateTime;
  createdAt_lt?: DateTime;
  createdAt_lte?: DateTime;
  createdAt_gt?: DateTime;
  createdAt_gte?: DateTime;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
}

export interface PostCreateInput {
  isPublished?: Boolean;
  title: String;
  text: String;
}

export interface PostWhereInput {
  AND?: PostWhereInput[] | PostWhereInput;
  OR?: PostWhereInput[] | PostWhereInput;
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  isPublished?: Boolean;
  isPublished_not?: Boolean;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  text?: String;
  text_not?: String;
  text_in?: String[] | String;
  text_not_in?: String[] | String;
  text_lt?: String;
  text_lte?: String;
  text_gt?: String;
  text_gte?: String;
  text_contains?: String;
  text_not_contains?: String;
  text_starts_with?: String;
  text_not_starts_with?: String;
  text_ends_with?: String;
  text_not_ends_with?: String;
}

export interface TalkWhereUniqueInput {
  id?: ID_Input;
}

export interface PostWhereUniqueInput {
  id?: ID_Input;
}

export interface TalkCreateInput {
  text: String;
}

export interface PostSubscriptionWhereInput {
  AND?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  OR?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PostWhereInput;
}

export interface PostUpdateInput {
  isPublished?: Boolean;
  title?: String;
  text?: String;
}

export interface TalkSubscriptionWhereInput {
  AND?: TalkSubscriptionWhereInput[] | TalkSubscriptionWhereInput;
  OR?: TalkSubscriptionWhereInput[] | TalkSubscriptionWhereInput;
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: TalkWhereInput;
}

export interface TalkUpdateInput {
  text?: String;
}

export interface Node {
  id: ID_Output;
}

export interface AggregatePost {
  count: Int;
}

export interface Post extends Node {
  id: ID_Output;
  isPublished: Boolean;
  title: String;
  text: String;
}

export interface TalkPreviousValues {
  id: ID_Output;
  createdAt: DateTime;
  text: String;
}

export interface BatchPayload {
  count: Long;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  node?: Post;
  updatedFields?: String[];
  previousValues?: PostPreviousValues;
}

export interface PostPreviousValues {
  id: ID_Output;
  isPublished: Boolean;
  title: String;
  text: String;
}

export interface AggregateTalk {
  count: Int;
}

export interface TalkConnection {
  pageInfo: PageInfo;
  edges: TalkEdge[];
  aggregate: AggregateTalk;
}

export interface PostEdge {
  node: Post;
  cursor: String;
}

export interface TalkSubscriptionPayload {
  mutation: MutationType;
  node?: Talk;
  updatedFields?: String[];
  previousValues?: TalkPreviousValues;
}

export interface Talk extends Node {
  id: ID_Output;
  createdAt: DateTime;
  text: String;
}

export interface PostConnection {
  pageInfo: PageInfo;
  edges: PostEdge[];
  aggregate: AggregatePost;
}

export interface TalkEdge {
  node: Talk;
  cursor: String;
}

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

export type DateTime = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

export interface Schema {
  query: Query;
  mutation: Mutation;
  subscription: Subscription;
}

export type Query = {
  posts: (
    args: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
    info?: GraphQLResolveInfo | string
  ) => Promise<Post[]>;
  talks: (
    args: {
      where?: TalkWhereInput;
      orderBy?: TalkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
    info?: GraphQLResolveInfo | string
  ) => Promise<Talk[]>;
  post: (
    args: { where: PostWhereUniqueInput },
    info?: GraphQLResolveInfo | string
  ) => Promise<Post | null>;
  talk: (
    args: { where: TalkWhereUniqueInput },
    info?: GraphQLResolveInfo | string
  ) => Promise<Talk | null>;
  postsConnection: (
    args: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
    info?: GraphQLResolveInfo | string
  ) => Promise<PostConnection>;
  talksConnection: (
    args: {
      where?: TalkWhereInput;
      orderBy?: TalkOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    },
    info?: GraphQLResolveInfo | string
  ) => Promise<TalkConnection>;
  node: (
    args: { id: ID_Output },
    info?: GraphQLResolveInfo | string
  ) => Promise<Node | null>;
};

export type Mutation = {
  createPost: (
    args: { data: PostCreateInput },
    info?: GraphQLResolveInfo | string
  ) => Promise<Post>;
  createTalk: (
    args: { data: TalkCreateInput },
    info?: GraphQLResolveInfo | string
  ) => Promise<Talk>;
  updatePost: (
    args: { data: PostUpdateInput; where: PostWhereUniqueInput },
    info?: GraphQLResolveInfo | string
  ) => Promise<Post | null>;
  updateTalk: (
    args: { data: TalkUpdateInput; where: TalkWhereUniqueInput },
    info?: GraphQLResolveInfo | string
  ) => Promise<Talk | null>;
  deletePost: (
    args: { where: PostWhereUniqueInput },
    info?: GraphQLResolveInfo | string
  ) => Promise<Post | null>;
  deleteTalk: (
    args: { where: TalkWhereUniqueInput },
    info?: GraphQLResolveInfo | string
  ) => Promise<Talk | null>;
  upsertPost: (
    args: {
      where: PostWhereUniqueInput;
      create: PostCreateInput;
      update: PostUpdateInput;
    },
    info?: GraphQLResolveInfo | string
  ) => Promise<Post>;
  upsertTalk: (
    args: {
      where: TalkWhereUniqueInput;
      create: TalkCreateInput;
      update: TalkUpdateInput;
    },
    info?: GraphQLResolveInfo | string
  ) => Promise<Talk>;
  updateManyPosts: (
    args: { data: PostUpdateInput; where: PostWhereInput },
    info?: GraphQLResolveInfo | string
  ) => Promise<BatchPayload>;
  updateManyTalks: (
    args: { data: TalkUpdateInput; where: TalkWhereInput },
    info?: GraphQLResolveInfo | string
  ) => Promise<BatchPayload>;
  deleteManyPosts: (
    args: { where: PostWhereInput },
    info?: GraphQLResolveInfo | string
  ) => Promise<BatchPayload>;
  deleteManyTalks: (
    args: { where: TalkWhereInput },
    info?: GraphQLResolveInfo | string
  ) => Promise<BatchPayload>;
};

export type Subscription = {
  post: (
    args: { where?: PostSubscriptionWhereInput },
    infoOrQuery?: GraphQLResolveInfo | string
  ) => Promise<AsyncIterator<PostSubscriptionPayload>>;
  talk: (
    args: { where?: TalkSubscriptionWhereInput },
    infoOrQuery?: GraphQLResolveInfo | string
  ) => Promise<AsyncIterator<TalkSubscriptionPayload>>;
};

export class Prisma extends BasePrisma {
  constructor({
    endpoint,
    secret,
    fragmentReplacements,
    debug
  }: BasePrismaOptions) {
    super({ typeDefs, endpoint, secret, fragmentReplacements, debug });
  }

  exists = {
    Post: (where: PostWhereInput): Promise<boolean> =>
      super.existsDelegate("query", "posts", { where }, {}, "{ id }"),
    Talk: (where: TalkWhereInput): Promise<boolean> =>
      super.existsDelegate("query", "talks", { where }, {}, "{ id }")
  };

  query: Query = {
    posts: (args, info): Promise<Post[]> =>
      super.delegate("query", "posts", args, {}, info),
    talks: (args, info): Promise<Talk[]> =>
      super.delegate("query", "talks", args, {}, info),
    post: (args, info): Promise<Post | null> =>
      super.delegate("query", "post", args, {}, info),
    talk: (args, info): Promise<Talk | null> =>
      super.delegate("query", "talk", args, {}, info),
    postsConnection: (args, info): Promise<PostConnection> =>
      super.delegate("query", "postsConnection", args, {}, info),
    talksConnection: (args, info): Promise<TalkConnection> =>
      super.delegate("query", "talksConnection", args, {}, info),
    node: (args, info): Promise<Node | null> =>
      super.delegate("query", "node", args, {}, info)
  };

  mutation: Mutation = {
    createPost: (args, info): Promise<Post> =>
      super.delegate("mutation", "createPost", args, {}, info),
    createTalk: (args, info): Promise<Talk> =>
      super.delegate("mutation", "createTalk", args, {}, info),
    updatePost: (args, info): Promise<Post | null> =>
      super.delegate("mutation", "updatePost", args, {}, info),
    updateTalk: (args, info): Promise<Talk | null> =>
      super.delegate("mutation", "updateTalk", args, {}, info),
    deletePost: (args, info): Promise<Post | null> =>
      super.delegate("mutation", "deletePost", args, {}, info),
    deleteTalk: (args, info): Promise<Talk | null> =>
      super.delegate("mutation", "deleteTalk", args, {}, info),
    upsertPost: (args, info): Promise<Post> =>
      super.delegate("mutation", "upsertPost", args, {}, info),
    upsertTalk: (args, info): Promise<Talk> =>
      super.delegate("mutation", "upsertTalk", args, {}, info),
    updateManyPosts: (args, info): Promise<BatchPayload> =>
      super.delegate("mutation", "updateManyPosts", args, {}, info),
    updateManyTalks: (args, info): Promise<BatchPayload> =>
      super.delegate("mutation", "updateManyTalks", args, {}, info),
    deleteManyPosts: (args, info): Promise<BatchPayload> =>
      super.delegate("mutation", "deleteManyPosts", args, {}, info),
    deleteManyTalks: (args, info): Promise<BatchPayload> =>
      super.delegate("mutation", "deleteManyTalks", args, {}, info)
  };

  subscription: Subscription = {
    post: (
      args,
      infoOrQuery
    ): Promise<AsyncIterator<PostSubscriptionPayload>> =>
      super.delegateSubscription("post", args, {}, infoOrQuery),
    talk: (
      args,
      infoOrQuery
    ): Promise<AsyncIterator<TalkSubscriptionPayload>> =>
      super.delegateSubscription("talk", args, {}, infoOrQuery)
  };
}
