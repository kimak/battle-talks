import { Prisma as BasePrisma, BasePrismaOptions } from 'prisma-binding'
import { GraphQLResolveInfo } from 'graphql'

export const typeDefs = `
# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Battle implements Node {
  id: ID!
  createdAt: DateTime!
  talk(where: TalkWhereInput): Talk!
  waiting: Boolean!
  ready: Boolean!
  complete: Boolean!
  code: String!
}

type Post implements Node {
  id: ID!
  isPublished: Boolean!
  title: String!
  text: String!
}

type Talk implements Node {
  id: ID!
  createdAt: DateTime!
  text: String!
}

type User implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String
  battles(where: BattleWhereInput, orderBy: BattleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Battle!]
}


#
# Other Types
#

type AggregateBattle {
  count: Int!
}

type AggregateInvitedCode {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateTalk {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type BattleConnection {
  pageInfo: PageInfo!
  edges: [BattleEdge]!
  aggregate: AggregateBattle!
}

input BattleCreateInput {
  waiting: Boolean
  ready: Boolean
  complete: Boolean
  code: String!
  talk: TalkCreateOneInput!
}

input BattleCreateManyInput {
  create: [BattleCreateInput!]
  connect: [BattleWhereUniqueInput!]
}

type BattleEdge {
  node: Battle!
  cursor: String!
}

enum BattleOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  waiting_ASC
  waiting_DESC
  ready_ASC
  ready_DESC
  complete_ASC
  complete_DESC
  code_ASC
  code_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BattlePreviousValues {
  id: ID!
  createdAt: DateTime!
  waiting: Boolean!
  ready: Boolean!
  complete: Boolean!
  code: String!
}

type BattleSubscriptionPayload {
  mutation: MutationType!
  node: Battle
  updatedFields: [String!]
  previousValues: BattlePreviousValues
}

input BattleSubscriptionWhereInput {
  AND: [BattleSubscriptionWhereInput!]
  OR: [BattleSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BattleWhereInput
}

input BattleUpdateDataInput {
  waiting: Boolean
  ready: Boolean
  complete: Boolean
  code: String
  talk: TalkUpdateOneInput
}

input BattleUpdateInput {
  waiting: Boolean
  ready: Boolean
  complete: Boolean
  code: String
  talk: TalkUpdateOneInput
}

input BattleUpdateManyInput {
  create: [BattleCreateInput!]
  connect: [BattleWhereUniqueInput!]
  disconnect: [BattleWhereUniqueInput!]
  delete: [BattleWhereUniqueInput!]
  update: [BattleUpdateNestedInput!]
  upsert: [BattleUpsertNestedInput!]
}

input BattleUpdateNestedInput {
  where: BattleWhereUniqueInput!
  data: BattleUpdateDataInput!
}

input BattleUpsertNestedInput {
  where: BattleWhereUniqueInput!
  update: BattleUpdateDataInput!
  create: BattleCreateInput!
}

input BattleWhereInput {
  AND: [BattleWhereInput!]
  OR: [BattleWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  waiting: Boolean
  waiting_not: Boolean
  ready: Boolean
  ready_not: Boolean
  complete: Boolean
  complete_not: Boolean
  code: String
  code_not: String
  code_in: [String!]
  code_not_in: [String!]
  code_lt: String
  code_lte: String
  code_gt: String
  code_gte: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
  talk: TalkWhereInput
}

input BattleWhereUniqueInput {
  id: ID
}

scalar DateTime

type InvitedCode {
  code: String!
}

type InvitedCodeConnection {
  pageInfo: PageInfo!
  edges: [InvitedCodeEdge]!
  aggregate: AggregateInvitedCode!
}

input InvitedCodeCreateInput {
  code: String!
}

type InvitedCodeEdge {
  node: InvitedCode!
  cursor: String!
}

enum InvitedCodeOrderByInput {
  code_ASC
  code_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type InvitedCodePreviousValues {
  code: String!
}

type InvitedCodeSubscriptionPayload {
  mutation: MutationType!
  node: InvitedCode
  updatedFields: [String!]
  previousValues: InvitedCodePreviousValues
}

input InvitedCodeSubscriptionWhereInput {
  AND: [InvitedCodeSubscriptionWhereInput!]
  OR: [InvitedCodeSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: InvitedCodeWhereInput
}

input InvitedCodeUpdateInput {
  code: String
}

input InvitedCodeWhereInput {
  AND: [InvitedCodeWhereInput!]
  OR: [InvitedCodeWhereInput!]
  code: String
  code_not: String
  code_in: [String!]
  code_not_in: [String!]
  code_lt: String
  code_lte: String
  code_gt: String
  code_gte: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
}

input InvitedCodeWhereUniqueInput {
  code: String
}

scalar Long

type Mutation {
  createPost(data: PostCreateInput!): Post!
  createTalk(data: TalkCreateInput!): Talk!
  createInvitedCode(data: InvitedCodeCreateInput!): InvitedCode!
  createBattle(data: BattleCreateInput!): Battle!
  createUser(data: UserCreateInput!): User!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateTalk(data: TalkUpdateInput!, where: TalkWhereUniqueInput!): Talk
  updateInvitedCode(data: InvitedCodeUpdateInput!, where: InvitedCodeWhereUniqueInput!): InvitedCode
  updateBattle(data: BattleUpdateInput!, where: BattleWhereUniqueInput!): Battle
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deletePost(where: PostWhereUniqueInput!): Post
  deleteTalk(where: TalkWhereUniqueInput!): Talk
  deleteInvitedCode(where: InvitedCodeWhereUniqueInput!): InvitedCode
  deleteBattle(where: BattleWhereUniqueInput!): Battle
  deleteUser(where: UserWhereUniqueInput!): User
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertTalk(where: TalkWhereUniqueInput!, create: TalkCreateInput!, update: TalkUpdateInput!): Talk!
  upsertInvitedCode(where: InvitedCodeWhereUniqueInput!, create: InvitedCodeCreateInput!, update: InvitedCodeUpdateInput!): InvitedCode!
  upsertBattle(where: BattleWhereUniqueInput!, create: BattleCreateInput!, update: BattleUpdateInput!): Battle!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyPosts(data: PostUpdateInput!, where: PostWhereInput!): BatchPayload!
  updateManyTalks(data: TalkUpdateInput!, where: TalkWhereInput!): BatchPayload!
  updateManyInvitedCodes(data: InvitedCodeUpdateInput!, where: InvitedCodeWhereInput!): BatchPayload!
  updateManyBattles(data: BattleUpdateInput!, where: BattleWhereInput!): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  deleteManyPosts(where: PostWhereInput!): BatchPayload!
  deleteManyTalks(where: TalkWhereInput!): BatchPayload!
  deleteManyInvitedCodes(where: InvitedCodeWhereInput!): BatchPayload!
  deleteManyBattles(where: BattleWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  isPublished: Boolean
  title: String!
  text: String!
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  isPublished_ASC
  isPublished_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PostPreviousValues {
  id: ID!
  isPublished: Boolean!
  title: String!
  text: String!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  isPublished: Boolean
  title: String
  text: String
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  isPublished: Boolean
  isPublished_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  talks(where: TalkWhereInput, orderBy: TalkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Talk]!
  invitedCodes(where: InvitedCodeWhereInput, orderBy: InvitedCodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InvitedCode]!
  battles(where: BattleWhereInput, orderBy: BattleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Battle]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  post(where: PostWhereUniqueInput!): Post
  talk(where: TalkWhereUniqueInput!): Talk
  invitedCode(where: InvitedCodeWhereUniqueInput!): InvitedCode
  battle(where: BattleWhereUniqueInput!): Battle
  user(where: UserWhereUniqueInput!): User
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  talksConnection(where: TalkWhereInput, orderBy: TalkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TalkConnection!
  invitedCodesConnection(where: InvitedCodeWhereInput, orderBy: InvitedCodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InvitedCodeConnection!
  battlesConnection(where: BattleWhereInput, orderBy: BattleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BattleConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  talk(where: TalkSubscriptionWhereInput): TalkSubscriptionPayload
  invitedCode(where: InvitedCodeSubscriptionWhereInput): InvitedCodeSubscriptionPayload
  battle(where: BattleSubscriptionWhereInput): BattleSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type TalkConnection {
  pageInfo: PageInfo!
  edges: [TalkEdge]!
  aggregate: AggregateTalk!
}

input TalkCreateInput {
  text: String!
}

input TalkCreateOneInput {
  create: TalkCreateInput
  connect: TalkWhereUniqueInput
}

type TalkEdge {
  node: Talk!
  cursor: String!
}

enum TalkOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TalkPreviousValues {
  id: ID!
  createdAt: DateTime!
  text: String!
}

type TalkSubscriptionPayload {
  mutation: MutationType!
  node: Talk
  updatedFields: [String!]
  previousValues: TalkPreviousValues
}

input TalkSubscriptionWhereInput {
  AND: [TalkSubscriptionWhereInput!]
  OR: [TalkSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TalkWhereInput
}

input TalkUpdateDataInput {
  text: String
}

input TalkUpdateInput {
  text: String
}

input TalkUpdateNestedInput {
  where: TalkWhereUniqueInput!
  data: TalkUpdateDataInput!
}

input TalkUpdateOneInput {
  create: TalkCreateInput
  connect: TalkWhereUniqueInput
  disconnect: TalkWhereUniqueInput
  delete: TalkWhereUniqueInput
  update: TalkUpdateNestedInput
  upsert: TalkUpsertNestedInput
}

input TalkUpsertNestedInput {
  where: TalkWhereUniqueInput!
  update: TalkUpdateDataInput!
  create: TalkCreateInput!
}

input TalkWhereInput {
  AND: [TalkWhereInput!]
  OR: [TalkWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
}

input TalkWhereUniqueInput {
  id: ID
  text: String
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  username: String
  battles: BattleCreateManyInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  username_ASC
  username_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  username: String
  battles: BattleUpdateManyInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  battles_every: BattleWhereInput
  battles_some: BattleWhereInput
  battles_none: BattleWhereInput
}

input UserWhereUniqueInput {
  id: ID
}
`

export type MutationType = 
  'CREATED' |
  'UPDATED' |
  'DELETED'

export type TalkOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'text_ASC' |
  'text_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC'

export type InvitedCodeOrderByInput = 
  'code_ASC' |
  'code_DESC' |
  'id_ASC' |
  'id_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type BattleOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'waiting_ASC' |
  'waiting_DESC' |
  'ready_ASC' |
  'ready_DESC' |
  'complete_ASC' |
  'complete_DESC' |
  'code_ASC' |
  'code_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC'

export type PostOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'isPublished_ASC' |
  'isPublished_DESC' |
  'title_ASC' |
  'title_DESC' |
  'text_ASC' |
  'text_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type UserOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'username_ASC' |
  'username_DESC'

export interface TalkWhereUniqueInput {
  id?: ID_Input
  text?: String
}

export interface PostCreateInput {
  isPublished?: Boolean
  title: String
  text: String
}

export interface BattleUpdateManyInput {
  create?: BattleCreateInput[] | BattleCreateInput
  connect?: BattleWhereUniqueInput[] | BattleWhereUniqueInput
  disconnect?: BattleWhereUniqueInput[] | BattleWhereUniqueInput
  delete?: BattleWhereUniqueInput[] | BattleWhereUniqueInput
  update?: BattleUpdateNestedInput[] | BattleUpdateNestedInput
  upsert?: BattleUpsertNestedInput[] | BattleUpsertNestedInput
}

export interface PostWhereInput {
  AND?: PostWhereInput[] | PostWhereInput
  OR?: PostWhereInput[] | PostWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  isPublished?: Boolean
  isPublished_not?: Boolean
  title?: String
  title_not?: String
  title_in?: String[] | String
  title_not_in?: String[] | String
  title_lt?: String
  title_lte?: String
  title_gt?: String
  title_gte?: String
  title_contains?: String
  title_not_contains?: String
  title_starts_with?: String
  title_not_starts_with?: String
  title_ends_with?: String
  title_not_ends_with?: String
  text?: String
  text_not?: String
  text_in?: String[] | String
  text_not_in?: String[] | String
  text_lt?: String
  text_lte?: String
  text_gt?: String
  text_gte?: String
  text_contains?: String
  text_not_contains?: String
  text_starts_with?: String
  text_not_starts_with?: String
  text_ends_with?: String
  text_not_ends_with?: String
}

export interface UserUpdateInput {
  username?: String
  battles?: BattleUpdateManyInput
}

export interface TalkWhereInput {
  AND?: TalkWhereInput[] | TalkWhereInput
  OR?: TalkWhereInput[] | TalkWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  text?: String
  text_not?: String
  text_in?: String[] | String
  text_not_in?: String[] | String
  text_lt?: String
  text_lte?: String
  text_gt?: String
  text_gte?: String
  text_contains?: String
  text_not_contains?: String
  text_starts_with?: String
  text_not_starts_with?: String
  text_ends_with?: String
  text_not_ends_with?: String
}

export interface TalkUpsertNestedInput {
  where: TalkWhereUniqueInput
  update: TalkUpdateDataInput
  create: TalkCreateInput
}

export interface PostSubscriptionWhereInput {
  AND?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput
  OR?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: PostWhereInput
}

export interface TalkUpdateDataInput {
  text?: String
}

export interface TalkSubscriptionWhereInput {
  AND?: TalkSubscriptionWhereInput[] | TalkSubscriptionWhereInput
  OR?: TalkSubscriptionWhereInput[] | TalkSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: TalkWhereInput
}

export interface TalkUpdateNestedInput {
  where: TalkWhereUniqueInput
  data: TalkUpdateDataInput
}

export interface BattleWhereInput {
  AND?: BattleWhereInput[] | BattleWhereInput
  OR?: BattleWhereInput[] | BattleWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  waiting?: Boolean
  waiting_not?: Boolean
  ready?: Boolean
  ready_not?: Boolean
  complete?: Boolean
  complete_not?: Boolean
  code?: String
  code_not?: String
  code_in?: String[] | String
  code_not_in?: String[] | String
  code_lt?: String
  code_lte?: String
  code_gt?: String
  code_gte?: String
  code_contains?: String
  code_not_contains?: String
  code_starts_with?: String
  code_not_starts_with?: String
  code_ends_with?: String
  code_not_ends_with?: String
  talk?: TalkWhereInput
}

export interface TalkUpdateOneInput {
  create?: TalkCreateInput
  connect?: TalkWhereUniqueInput
  disconnect?: TalkWhereUniqueInput
  delete?: TalkWhereUniqueInput
  update?: TalkUpdateNestedInput
  upsert?: TalkUpsertNestedInput
}

export interface BattleUpdateDataInput {
  waiting?: Boolean
  ready?: Boolean
  complete?: Boolean
  code?: String
  talk?: TalkUpdateOneInput
}

export interface BattleUpdateInput {
  waiting?: Boolean
  ready?: Boolean
  complete?: Boolean
  code?: String
  talk?: TalkUpdateOneInput
}

export interface BattleSubscriptionWhereInput {
  AND?: BattleSubscriptionWhereInput[] | BattleSubscriptionWhereInput
  OR?: BattleSubscriptionWhereInput[] | BattleSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: BattleWhereInput
}

export interface InvitedCodeUpdateInput {
  code?: String
}

export interface PostWhereUniqueInput {
  id?: ID_Input
}

export interface TalkUpdateInput {
  text?: String
}

export interface InvitedCodeWhereUniqueInput {
  code?: String
}

export interface PostUpdateInput {
  isPublished?: Boolean
  title?: String
  text?: String
}

export interface UserWhereUniqueInput {
  id?: ID_Input
}

export interface BattleCreateManyInput {
  create?: BattleCreateInput[] | BattleCreateInput
  connect?: BattleWhereUniqueInput[] | BattleWhereUniqueInput
}

export interface InvitedCodeWhereInput {
  AND?: InvitedCodeWhereInput[] | InvitedCodeWhereInput
  OR?: InvitedCodeWhereInput[] | InvitedCodeWhereInput
  code?: String
  code_not?: String
  code_in?: String[] | String
  code_not_in?: String[] | String
  code_lt?: String
  code_lte?: String
  code_gt?: String
  code_gte?: String
  code_contains?: String
  code_not_contains?: String
  code_starts_with?: String
  code_not_starts_with?: String
  code_ends_with?: String
  code_not_ends_with?: String
}

export interface UserCreateInput {
  username?: String
  battles?: BattleCreateManyInput
}

export interface InvitedCodeSubscriptionWhereInput {
  AND?: InvitedCodeSubscriptionWhereInput[] | InvitedCodeSubscriptionWhereInput
  OR?: InvitedCodeSubscriptionWhereInput[] | InvitedCodeSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: InvitedCodeWhereInput
}

export interface BattleUpdateNestedInput {
  where: BattleWhereUniqueInput
  data: BattleUpdateDataInput
}

export interface TalkCreateInput {
  text: String
}

export interface InvitedCodeCreateInput {
  code: String
}

export interface BattleCreateInput {
  waiting?: Boolean
  ready?: Boolean
  complete?: Boolean
  code: String
  talk: TalkCreateOneInput
}

export interface TalkCreateOneInput {
  create?: TalkCreateInput
  connect?: TalkWhereUniqueInput
}

export interface UserSubscriptionWhereInput {
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: UserWhereInput
}

export interface UserWhereInput {
  AND?: UserWhereInput[] | UserWhereInput
  OR?: UserWhereInput[] | UserWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  updatedAt?: DateTime
  updatedAt_not?: DateTime
  updatedAt_in?: DateTime[] | DateTime
  updatedAt_not_in?: DateTime[] | DateTime
  updatedAt_lt?: DateTime
  updatedAt_lte?: DateTime
  updatedAt_gt?: DateTime
  updatedAt_gte?: DateTime
  username?: String
  username_not?: String
  username_in?: String[] | String
  username_not_in?: String[] | String
  username_lt?: String
  username_lte?: String
  username_gt?: String
  username_gte?: String
  username_contains?: String
  username_not_contains?: String
  username_starts_with?: String
  username_not_starts_with?: String
  username_ends_with?: String
  username_not_ends_with?: String
  battles_every?: BattleWhereInput
  battles_some?: BattleWhereInput
  battles_none?: BattleWhereInput
}

export interface BattleUpsertNestedInput {
  where: BattleWhereUniqueInput
  update: BattleUpdateDataInput
  create: BattleCreateInput
}

export interface BattleWhereUniqueInput {
  id?: ID_Input
}

export interface Node {
  id: ID_Output
}

export interface UserEdge {
  node: User
  cursor: String
}

export interface InvitedCode {
  code: String
}

export interface UserPreviousValues {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  username?: String
}

export interface BatchPayload {
  count: Long
}

export interface AggregateUser {
  count: Int
}

export interface UserConnection {
  pageInfo: PageInfo
  edges: UserEdge[]
  aggregate: AggregateUser
}

export interface BattleEdge {
  node: Battle
  cursor: String
}

export interface Talk extends Node {
  id: ID_Output
  createdAt: DateTime
  text: String
}

export interface AggregateInvitedCode {
  count: Int
}

export interface BattleConnection {
  pageInfo: PageInfo
  edges: BattleEdge[]
  aggregate: AggregateBattle
}

export interface BattleSubscriptionPayload {
  mutation: MutationType
  node?: Battle
  updatedFields?: String[]
  previousValues?: BattlePreviousValues
}

export interface InvitedCodeEdge {
  node: InvitedCode
  cursor: String
}

export interface InvitedCodeConnection {
  pageInfo: PageInfo
  edges: InvitedCodeEdge[]
  aggregate: AggregateInvitedCode
}

export interface AggregateTalk {
  count: Int
}

export interface TalkConnection {
  pageInfo: PageInfo
  edges: TalkEdge[]
  aggregate: AggregateTalk
}

export interface PostSubscriptionPayload {
  mutation: MutationType
  node?: Post
  updatedFields?: String[]
  previousValues?: PostPreviousValues
}

export interface PostEdge {
  node: Post
  cursor: String
}

export interface PostPreviousValues {
  id: ID_Output
  isPublished: Boolean
  title: String
  text: String
}

export interface PostConnection {
  pageInfo: PageInfo
  edges: PostEdge[]
  aggregate: AggregatePost
}

export interface Post extends Node {
  id: ID_Output
  isPublished: Boolean
  title: String
  text: String
}

export interface Battle extends Node {
  id: ID_Output
  createdAt: DateTime
  talk: Talk
  waiting: Boolean
  ready: Boolean
  complete: Boolean
  code: String
}

export interface TalkSubscriptionPayload {
  mutation: MutationType
  node?: Talk
  updatedFields?: String[]
  previousValues?: TalkPreviousValues
}

export interface AggregateBattle {
  count: Int
}

export interface AggregatePost {
  count: Int
}

export interface InvitedCodePreviousValues {
  code: String
}

export interface InvitedCodeSubscriptionPayload {
  mutation: MutationType
  node?: InvitedCode
  updatedFields?: String[]
  previousValues?: InvitedCodePreviousValues
}

export interface BattlePreviousValues {
  id: ID_Output
  createdAt: DateTime
  waiting: Boolean
  ready: Boolean
  complete: Boolean
  code: String
}

export interface TalkPreviousValues {
  id: ID_Output
  createdAt: DateTime
  text: String
}

export interface PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor?: String
  endCursor?: String
}

export interface TalkEdge {
  node: Talk
  cursor: String
}

export interface UserSubscriptionPayload {
  mutation: MutationType
  node?: User
  updatedFields?: String[]
  previousValues?: UserPreviousValues
}

export interface User extends Node {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  username?: String
  battles?: Battle[]
}

export type DateTime = string

export type Long = string

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number
export type ID_Output = string

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string

export interface Schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

export type Query = {
  posts: (args: { where?: PostWhereInput, orderBy?: PostOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Post[]>
  talks: (args: { where?: TalkWhereInput, orderBy?: TalkOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Talk[]>
  invitedCodes: (args: { where?: InvitedCodeWhereInput, orderBy?: InvitedCodeOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<InvitedCode[]>
  battles: (args: { where?: BattleWhereInput, orderBy?: BattleOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Battle[]>
  users: (args: { where?: UserWhereInput, orderBy?: UserOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<User[]>
  post: (args: { where: PostWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Post | null>
  talk: (args: { where: TalkWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Talk | null>
  invitedCode: (args: { where: InvitedCodeWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<InvitedCode | null>
  battle: (args: { where: BattleWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Battle | null>
  user: (args: { where: UserWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<User | null>
  postsConnection: (args: { where?: PostWhereInput, orderBy?: PostOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<PostConnection>
  talksConnection: (args: { where?: TalkWhereInput, orderBy?: TalkOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<TalkConnection>
  invitedCodesConnection: (args: { where?: InvitedCodeWhereInput, orderBy?: InvitedCodeOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<InvitedCodeConnection>
  battlesConnection: (args: { where?: BattleWhereInput, orderBy?: BattleOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<BattleConnection>
  usersConnection: (args: { where?: UserWhereInput, orderBy?: UserOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<UserConnection>
  node: (args: { id: ID_Output }, info?: GraphQLResolveInfo | string) => Promise<Node | null>
}

export type Mutation = {
  createPost: (args: { data: PostCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Post>
  createTalk: (args: { data: TalkCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Talk>
  createInvitedCode: (args: { data: InvitedCodeCreateInput }, info?: GraphQLResolveInfo | string) => Promise<InvitedCode>
  createBattle: (args: { data: BattleCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Battle>
  createUser: (args: { data: UserCreateInput }, info?: GraphQLResolveInfo | string) => Promise<User>
  updatePost: (args: { data: PostUpdateInput, where: PostWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Post | null>
  updateTalk: (args: { data: TalkUpdateInput, where: TalkWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Talk | null>
  updateInvitedCode: (args: { data: InvitedCodeUpdateInput, where: InvitedCodeWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<InvitedCode | null>
  updateBattle: (args: { data: BattleUpdateInput, where: BattleWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Battle | null>
  updateUser: (args: { data: UserUpdateInput, where: UserWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<User | null>
  deletePost: (args: { where: PostWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Post | null>
  deleteTalk: (args: { where: TalkWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Talk | null>
  deleteInvitedCode: (args: { where: InvitedCodeWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<InvitedCode | null>
  deleteBattle: (args: { where: BattleWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Battle | null>
  deleteUser: (args: { where: UserWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<User | null>
  upsertPost: (args: { where: PostWhereUniqueInput, create: PostCreateInput, update: PostUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Post>
  upsertTalk: (args: { where: TalkWhereUniqueInput, create: TalkCreateInput, update: TalkUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Talk>
  upsertInvitedCode: (args: { where: InvitedCodeWhereUniqueInput, create: InvitedCodeCreateInput, update: InvitedCodeUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<InvitedCode>
  upsertBattle: (args: { where: BattleWhereUniqueInput, create: BattleCreateInput, update: BattleUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Battle>
  upsertUser: (args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<User>
  updateManyPosts: (args: { data: PostUpdateInput, where: PostWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyTalks: (args: { data: TalkUpdateInput, where: TalkWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyInvitedCodes: (args: { data: InvitedCodeUpdateInput, where: InvitedCodeWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyBattles: (args: { data: BattleUpdateInput, where: BattleWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyUsers: (args: { data: UserUpdateInput, where: UserWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyPosts: (args: { where: PostWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyTalks: (args: { where: TalkWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyInvitedCodes: (args: { where: InvitedCodeWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyBattles: (args: { where: BattleWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyUsers: (args: { where: UserWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
}

export type Subscription = {
  post: (args: { where?: PostSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<PostSubscriptionPayload>>
  talk: (args: { where?: TalkSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<TalkSubscriptionPayload>>
  invitedCode: (args: { where?: InvitedCodeSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<InvitedCodeSubscriptionPayload>>
  battle: (args: { where?: BattleSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<BattleSubscriptionPayload>>
  user: (args: { where?: UserSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<UserSubscriptionPayload>>
}

export class Prisma extends BasePrisma {
  
  constructor({ endpoint, secret, fragmentReplacements, debug }: BasePrismaOptions) {
    super({ typeDefs, endpoint, secret, fragmentReplacements, debug });
  }

  exists = {
    Post: (where: PostWhereInput): Promise<boolean> => super.existsDelegate('query', 'posts', { where }, {}, '{ id }'),
    Talk: (where: TalkWhereInput): Promise<boolean> => super.existsDelegate('query', 'talks', { where }, {}, '{ id }'),
    InvitedCode: (where: InvitedCodeWhereInput): Promise<boolean> => super.existsDelegate('query', 'invitedCodes', { where }, {}, '{ id }'),
    Battle: (where: BattleWhereInput): Promise<boolean> => super.existsDelegate('query', 'battles', { where }, {}, '{ id }'),
    User: (where: UserWhereInput): Promise<boolean> => super.existsDelegate('query', 'users', { where }, {}, '{ id }')
  }

  query: Query = {
    posts: (args, info): Promise<Post[]> => super.delegate('query', 'posts', args, {}, info),
    talks: (args, info): Promise<Talk[]> => super.delegate('query', 'talks', args, {}, info),
    invitedCodes: (args, info): Promise<InvitedCode[]> => super.delegate('query', 'invitedCodes', args, {}, info),
    battles: (args, info): Promise<Battle[]> => super.delegate('query', 'battles', args, {}, info),
    users: (args, info): Promise<User[]> => super.delegate('query', 'users', args, {}, info),
    post: (args, info): Promise<Post | null> => super.delegate('query', 'post', args, {}, info),
    talk: (args, info): Promise<Talk | null> => super.delegate('query', 'talk', args, {}, info),
    invitedCode: (args, info): Promise<InvitedCode | null> => super.delegate('query', 'invitedCode', args, {}, info),
    battle: (args, info): Promise<Battle | null> => super.delegate('query', 'battle', args, {}, info),
    user: (args, info): Promise<User | null> => super.delegate('query', 'user', args, {}, info),
    postsConnection: (args, info): Promise<PostConnection> => super.delegate('query', 'postsConnection', args, {}, info),
    talksConnection: (args, info): Promise<TalkConnection> => super.delegate('query', 'talksConnection', args, {}, info),
    invitedCodesConnection: (args, info): Promise<InvitedCodeConnection> => super.delegate('query', 'invitedCodesConnection', args, {}, info),
    battlesConnection: (args, info): Promise<BattleConnection> => super.delegate('query', 'battlesConnection', args, {}, info),
    usersConnection: (args, info): Promise<UserConnection> => super.delegate('query', 'usersConnection', args, {}, info),
    node: (args, info): Promise<Node | null> => super.delegate('query', 'node', args, {}, info)
  }

  mutation: Mutation = {
    createPost: (args, info): Promise<Post> => super.delegate('mutation', 'createPost', args, {}, info),
    createTalk: (args, info): Promise<Talk> => super.delegate('mutation', 'createTalk', args, {}, info),
    createInvitedCode: (args, info): Promise<InvitedCode> => super.delegate('mutation', 'createInvitedCode', args, {}, info),
    createBattle: (args, info): Promise<Battle> => super.delegate('mutation', 'createBattle', args, {}, info),
    createUser: (args, info): Promise<User> => super.delegate('mutation', 'createUser', args, {}, info),
    updatePost: (args, info): Promise<Post | null> => super.delegate('mutation', 'updatePost', args, {}, info),
    updateTalk: (args, info): Promise<Talk | null> => super.delegate('mutation', 'updateTalk', args, {}, info),
    updateInvitedCode: (args, info): Promise<InvitedCode | null> => super.delegate('mutation', 'updateInvitedCode', args, {}, info),
    updateBattle: (args, info): Promise<Battle | null> => super.delegate('mutation', 'updateBattle', args, {}, info),
    updateUser: (args, info): Promise<User | null> => super.delegate('mutation', 'updateUser', args, {}, info),
    deletePost: (args, info): Promise<Post | null> => super.delegate('mutation', 'deletePost', args, {}, info),
    deleteTalk: (args, info): Promise<Talk | null> => super.delegate('mutation', 'deleteTalk', args, {}, info),
    deleteInvitedCode: (args, info): Promise<InvitedCode | null> => super.delegate('mutation', 'deleteInvitedCode', args, {}, info),
    deleteBattle: (args, info): Promise<Battle | null> => super.delegate('mutation', 'deleteBattle', args, {}, info),
    deleteUser: (args, info): Promise<User | null> => super.delegate('mutation', 'deleteUser', args, {}, info),
    upsertPost: (args, info): Promise<Post> => super.delegate('mutation', 'upsertPost', args, {}, info),
    upsertTalk: (args, info): Promise<Talk> => super.delegate('mutation', 'upsertTalk', args, {}, info),
    upsertInvitedCode: (args, info): Promise<InvitedCode> => super.delegate('mutation', 'upsertInvitedCode', args, {}, info),
    upsertBattle: (args, info): Promise<Battle> => super.delegate('mutation', 'upsertBattle', args, {}, info),
    upsertUser: (args, info): Promise<User> => super.delegate('mutation', 'upsertUser', args, {}, info),
    updateManyPosts: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyPosts', args, {}, info),
    updateManyTalks: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyTalks', args, {}, info),
    updateManyInvitedCodes: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyInvitedCodes', args, {}, info),
    updateManyBattles: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyBattles', args, {}, info),
    updateManyUsers: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyUsers', args, {}, info),
    deleteManyPosts: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyPosts', args, {}, info),
    deleteManyTalks: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyTalks', args, {}, info),
    deleteManyInvitedCodes: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyInvitedCodes', args, {}, info),
    deleteManyBattles: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyBattles', args, {}, info),
    deleteManyUsers: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyUsers', args, {}, info)
  }

  subscription: Subscription = {
    post: (args, infoOrQuery): Promise<AsyncIterator<PostSubscriptionPayload>> => super.delegateSubscription('post', args, {}, infoOrQuery),
    talk: (args, infoOrQuery): Promise<AsyncIterator<TalkSubscriptionPayload>> => super.delegateSubscription('talk', args, {}, infoOrQuery),
    invitedCode: (args, infoOrQuery): Promise<AsyncIterator<InvitedCodeSubscriptionPayload>> => super.delegateSubscription('invitedCode', args, {}, infoOrQuery),
    battle: (args, infoOrQuery): Promise<AsyncIterator<BattleSubscriptionPayload>> => super.delegateSubscription('battle', args, {}, infoOrQuery),
    user: (args, infoOrQuery): Promise<AsyncIterator<UserSubscriptionPayload>> => super.delegateSubscription('user', args, {}, infoOrQuery)
  }
}