# THIS FILE HAS BEEN AUTO-GENERATED BY "PRISMA DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Battle implements Node {
  id: ID!
  createdAt: DateTime!
  talk(where: TalkWhereInput): Talk!
  ready: Boolean!
  code: String!
}

type Post implements Node {
  id: ID!
  isPublished: Boolean!
  title: String!
  text: String!
}

type Talk implements Node {
  id: ID!
  createdAt: DateTime!
  text: String!
}

type User implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String
  battles(where: BattleWhereInput, orderBy: BattleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Battle!]
}


#
# Other Types
#

type AggregateBattle {
  count: Int!
}

type AggregateInvitedCode {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateTalk {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type BattleConnection {
  pageInfo: PageInfo!
  edges: [BattleEdge]!
  aggregate: AggregateBattle!
}

input BattleCreateInput {
  ready: Boolean
  code: String!
  talk: TalkCreateOneInput!
}

input BattleCreateManyInput {
  create: [BattleCreateInput!]
  connect: [BattleWhereUniqueInput!]
}

type BattleEdge {
  node: Battle!
  cursor: String!
}

enum BattleOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  ready_ASC
  ready_DESC
  code_ASC
  code_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BattlePreviousValues {
  id: ID!
  createdAt: DateTime!
  ready: Boolean!
  code: String!
}

type BattleSubscriptionPayload {
  mutation: MutationType!
  node: Battle
  updatedFields: [String!]
  previousValues: BattlePreviousValues
}

input BattleSubscriptionWhereInput {
  AND: [BattleSubscriptionWhereInput!]
  OR: [BattleSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BattleWhereInput
}

input BattleUpdateDataInput {
  ready: Boolean
  code: String
  talk: TalkUpdateOneInput
}

input BattleUpdateInput {
  ready: Boolean
  code: String
  talk: TalkUpdateOneInput
}

input BattleUpdateManyInput {
  create: [BattleCreateInput!]
  connect: [BattleWhereUniqueInput!]
  disconnect: [BattleWhereUniqueInput!]
  delete: [BattleWhereUniqueInput!]
  update: [BattleUpdateNestedInput!]
  upsert: [BattleUpsertNestedInput!]
}

input BattleUpdateNestedInput {
  where: BattleWhereUniqueInput!
  data: BattleUpdateDataInput!
}

input BattleUpsertNestedInput {
  where: BattleWhereUniqueInput!
  update: BattleUpdateDataInput!
  create: BattleCreateInput!
}

input BattleWhereInput {
  AND: [BattleWhereInput!]
  OR: [BattleWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  ready: Boolean
  ready_not: Boolean
  code: String
  code_not: String
  code_in: [String!]
  code_not_in: [String!]
  code_lt: String
  code_lte: String
  code_gt: String
  code_gte: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
  talk: TalkWhereInput
}

input BattleWhereUniqueInput {
  id: ID
}

scalar DateTime

type InvitedCode {
  code: String!
}

type InvitedCodeConnection {
  pageInfo: PageInfo!
  edges: [InvitedCodeEdge]!
  aggregate: AggregateInvitedCode!
}

input InvitedCodeCreateInput {
  code: String!
}

type InvitedCodeEdge {
  node: InvitedCode!
  cursor: String!
}

enum InvitedCodeOrderByInput {
  code_ASC
  code_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type InvitedCodePreviousValues {
  code: String!
}

type InvitedCodeSubscriptionPayload {
  mutation: MutationType!
  node: InvitedCode
  updatedFields: [String!]
  previousValues: InvitedCodePreviousValues
}

input InvitedCodeSubscriptionWhereInput {
  AND: [InvitedCodeSubscriptionWhereInput!]
  OR: [InvitedCodeSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: InvitedCodeWhereInput
}

input InvitedCodeUpdateInput {
  code: String
}

input InvitedCodeWhereInput {
  AND: [InvitedCodeWhereInput!]
  OR: [InvitedCodeWhereInput!]
  code: String
  code_not: String
  code_in: [String!]
  code_not_in: [String!]
  code_lt: String
  code_lte: String
  code_gt: String
  code_gte: String
  code_contains: String
  code_not_contains: String
  code_starts_with: String
  code_not_starts_with: String
  code_ends_with: String
  code_not_ends_with: String
}

input InvitedCodeWhereUniqueInput {
  code: String
}

scalar Long

type Mutation {
  createPost(data: PostCreateInput!): Post!
  createTalk(data: TalkCreateInput!): Talk!
  createInvitedCode(data: InvitedCodeCreateInput!): InvitedCode!
  createBattle(data: BattleCreateInput!): Battle!
  createUser(data: UserCreateInput!): User!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateTalk(data: TalkUpdateInput!, where: TalkWhereUniqueInput!): Talk
  updateInvitedCode(data: InvitedCodeUpdateInput!, where: InvitedCodeWhereUniqueInput!): InvitedCode
  updateBattle(data: BattleUpdateInput!, where: BattleWhereUniqueInput!): Battle
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deletePost(where: PostWhereUniqueInput!): Post
  deleteTalk(where: TalkWhereUniqueInput!): Talk
  deleteInvitedCode(where: InvitedCodeWhereUniqueInput!): InvitedCode
  deleteBattle(where: BattleWhereUniqueInput!): Battle
  deleteUser(where: UserWhereUniqueInput!): User
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertTalk(where: TalkWhereUniqueInput!, create: TalkCreateInput!, update: TalkUpdateInput!): Talk!
  upsertInvitedCode(where: InvitedCodeWhereUniqueInput!, create: InvitedCodeCreateInput!, update: InvitedCodeUpdateInput!): InvitedCode!
  upsertBattle(where: BattleWhereUniqueInput!, create: BattleCreateInput!, update: BattleUpdateInput!): Battle!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManyPosts(data: PostUpdateInput!, where: PostWhereInput!): BatchPayload!
  updateManyTalks(data: TalkUpdateInput!, where: TalkWhereInput!): BatchPayload!
  updateManyInvitedCodes(data: InvitedCodeUpdateInput!, where: InvitedCodeWhereInput!): BatchPayload!
  updateManyBattles(data: BattleUpdateInput!, where: BattleWhereInput!): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  deleteManyPosts(where: PostWhereInput!): BatchPayload!
  deleteManyTalks(where: TalkWhereInput!): BatchPayload!
  deleteManyInvitedCodes(where: InvitedCodeWhereInput!): BatchPayload!
  deleteManyBattles(where: BattleWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type PostConnection {
  pageInfo: PageInfo!
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  isPublished: Boolean
  title: String!
  text: String!
}

type PostEdge {
  node: Post!
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  isPublished_ASC
  isPublished_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PostPreviousValues {
  id: ID!
  isPublished: Boolean!
  title: String!
  text: String!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  AND: [PostSubscriptionWhereInput!]
  OR: [PostSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  isPublished: Boolean
  title: String
  text: String
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  isPublished: Boolean
  isPublished_not: Boolean
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  talks(where: TalkWhereInput, orderBy: TalkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Talk]!
  invitedCodes(where: InvitedCodeWhereInput, orderBy: InvitedCodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [InvitedCode]!
  battles(where: BattleWhereInput, orderBy: BattleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Battle]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  post(where: PostWhereUniqueInput!): Post
  talk(where: TalkWhereUniqueInput!): Talk
  invitedCode(where: InvitedCodeWhereUniqueInput!): InvitedCode
  battle(where: BattleWhereUniqueInput!): Battle
  user(where: UserWhereUniqueInput!): User
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  talksConnection(where: TalkWhereInput, orderBy: TalkOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TalkConnection!
  invitedCodesConnection(where: InvitedCodeWhereInput, orderBy: InvitedCodeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InvitedCodeConnection!
  battlesConnection(where: BattleWhereInput, orderBy: BattleOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BattleConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  talk(where: TalkSubscriptionWhereInput): TalkSubscriptionPayload
  invitedCode(where: InvitedCodeSubscriptionWhereInput): InvitedCodeSubscriptionPayload
  battle(where: BattleSubscriptionWhereInput): BattleSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type TalkConnection {
  pageInfo: PageInfo!
  edges: [TalkEdge]!
  aggregate: AggregateTalk!
}

input TalkCreateInput {
  text: String!
}

input TalkCreateOneInput {
  create: TalkCreateInput
  connect: TalkWhereUniqueInput
}

type TalkEdge {
  node: Talk!
  cursor: String!
}

enum TalkOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TalkPreviousValues {
  id: ID!
  createdAt: DateTime!
  text: String!
}

type TalkSubscriptionPayload {
  mutation: MutationType!
  node: Talk
  updatedFields: [String!]
  previousValues: TalkPreviousValues
}

input TalkSubscriptionWhereInput {
  AND: [TalkSubscriptionWhereInput!]
  OR: [TalkSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TalkWhereInput
}

input TalkUpdateDataInput {
  text: String
}

input TalkUpdateInput {
  text: String
}

input TalkUpdateNestedInput {
  where: TalkWhereUniqueInput!
  data: TalkUpdateDataInput!
}

input TalkUpdateOneInput {
  create: TalkCreateInput
  connect: TalkWhereUniqueInput
  disconnect: TalkWhereUniqueInput
  delete: TalkWhereUniqueInput
  update: TalkUpdateNestedInput
  upsert: TalkUpsertNestedInput
}

input TalkUpsertNestedInput {
  where: TalkWhereUniqueInput!
  update: TalkUpdateDataInput!
  create: TalkCreateInput!
}

input TalkWhereInput {
  AND: [TalkWhereInput!]
  OR: [TalkWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
}

input TalkWhereUniqueInput {
  id: ID
  text: String
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  username: String
  battles: BattleCreateManyInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  username_ASC
  username_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  username: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  username: String
  battles: BattleUpdateManyInput
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  username: String
  username_not: String
  username_in: [String!]
  username_not_in: [String!]
  username_lt: String
  username_lte: String
  username_gt: String
  username_gte: String
  username_contains: String
  username_not_contains: String
  username_starts_with: String
  username_not_starts_with: String
  username_ends_with: String
  username_not_ends_with: String
  battles_every: BattleWhereInput
  battles_some: BattleWhereInput
  battles_none: BattleWhereInput
}

input UserWhereUniqueInput {
  id: ID
}
